"""
This file provides a bridge function to allow IDPConformerGenerator to use MCSCE as its side chain builder 

Coded by Jie Li
Aug 31, 2021
"""

from functools import partial

import numpy as np
from mcsce.core import build_definitions
from mcsce.core.definitions import aa1to3
from mcsce.libs.libenergy import prepare_energy_function
from mcsce.libs.libstructure import Structure
from mcsce.core.side_chain_builder import initialize_func_calc, create_side_chain

def mcsce_sidechain(input_seq, coords, n_trials=200, efunc_terms=["lj", "clash"], temperature=300, parallel_worker=16, mode="simple"):
    """
    This function takes an input FASTA string indicating the amino acid sequence, 
    together with an Nx3 array for all coordinates of backbone atoms, 
    and returns an array with shape Mx3 where M is the total number of atoms in the structure with side chains added. 
    This function executes the MCSCE algorithm and returns the lowest energy conformation.

    Parameters
    ----------
    input_seq: str
        A FASTA string to specify the amino acid sequence

    coords: np.array with shape (5L+3, 3)
        L is the total length of the sequence, and the coordinates are in the order of N, CA, C, O, HN plus terminal atoms

    n_trials: int
        The total number of trials for the generation procedure

    efunc_terms: list
        Terms to be used in the energy evaluation function

    temperature: float
        The temperature value used for Boltzmann weighting

    parallel_worker: int
        Number of workers for parallel execution

    mode: either simple or exhaustive
        Simple means generating sidechains sequentially and return the first structure without clashes
        Exhaustive means generating n_trials structures and return the lowest energy one

    Returns
    ----------
    full_conformation: np.array with shape (M, 3)
        Coordinates of all atoms in the lowest-energy conformation generated by the MCSCE algorithm. When it is None, it means all trials of conformation generation have failed
    """
    s = Structure(fasta=input_seq)
    s.build()
    s.coords = coords
    
    # handles cap ptms
    ff = build_definitions.forcefields["Amberff14SB"]
    ff_obj = ff(Cterminal='OXT', Nterminal='HN')

    if mode == "simple":
        return_first_valid = True
    elif mode == "exhaustive":
        return_first_valid = False
    else:
        raise RuntimeError("Mode has to be either simple or exhaustive.")
    
    initialize_func_calc(partial(prepare_energy_function, batch_size=16,
         forcefield=ff_obj, terms=efunc_terms), structure=s, aa_seq=['H2D' if r=='H' else aa1to3[r] for r in input_seq])
    final_structure = create_side_chain(s, n_trials, temperature=temperature, parallel_worker=parallel_worker, 
                      return_first_valid=return_first_valid)

    if final_structure is not None:
        final_structure.write_PDB("test.pdb")
        return final_structure.coords
    else:
        return None


# Tests
if __name__ == "__main__":
    fasta = "MQCKHD"
    backbone_coords = np.array([[0.0, 0.0, 0.001],
                      [1.442, 0.0, 0.001],
                      [2.218, 1.281, 0.001],
                      [3.374, 1.3, 0.418],
                      [-0.337, -0.952, 0.001],
                      [-0.337, 0.476, 0.826],
                      [-0.337, 0.476, -0.824],
                      [1.466, 2.321, -0.503],
                      [2.103, 3.61, -0.622],
                      [1.541, 4.826, 0.048],
                      [0.512, 5.344, -0.381],
                      [0.506, 2.15, -0.768],
                      [2.304, 5.227, 1.124],
                      [1.864, 6.453, 1.742],
                      [2.722, 7.178, 2.733],
                      [2.528, 7.031, 3.938],
                      [3.099, 4.682, 1.427],
                      [3.647, 7.939, 2.049],
                      [4.573, 8.665, 2.882],
                      [4.213, 9.916, 3.625],
                      [4.113, 10.982, 3.021],
                      [3.646, 7.962, 1.039],
                      [4.057, 9.572, 4.951],
                      [3.61, 10.631, 5.822],
                      [2.271, 11.29, 5.698],
                      [2.174, 12.388, 5.155],
                      [4.252, 8.629, 5.257],
                      [1.317, 10.472, 6.266],
                      [-0.042, 10.937, 6.134],
                      [-0.934, 10.212, 7.159], 
                      [-2.113, 10.257, 6.941], [1.586, 9.617, 6.732], 
                      [-0.503, 9.619, 8.139]])
    result = mcsce_sidechain(fasta, backbone_coords, n_trials=20, efunc_terms=["lj", "clash"])
    print(result)



